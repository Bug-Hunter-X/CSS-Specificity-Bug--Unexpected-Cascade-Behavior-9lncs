The solution involves understanding and addressing the unexpected behavior of the CSS cascade.  One approach is to be more explicit and avoid potential conflicts by using more specific selectors.  It may also be useful to debug using the browser's developer tools to inspect the applied styles and their specificity.

```css
#myId {
  color: blue; 
}

#myId .myClass {
  color: red !important; /* Added !important to force override*/
}

.myClass {
  color: green;
}

#myId div.myClass {
  color:purple;
}
```

Adding `!important` forces the higher-specificity selector to override the lower-specificity one.  However, overuse of `!important` should generally be avoided as it can make CSS harder to maintain.
A more robust solution would involve restructuring the CSS to eliminate the ambiguity and ensure that selectors are appropriately specific and avoid conflicts without resorting to `!important`.